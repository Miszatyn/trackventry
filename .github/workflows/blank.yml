// ==============================================================================
// COMPLETE ENTERPRISE INVENTORY MANAGEMENT SYSTEM
// Built with React and Firebase Firestore
// Features: Multi-Company, Multi-Location, RBAC, Sales Orders, Kits, Contacts, Reorder Dashboard, Search/Filter.
// NOTE: This code requires a standard React setup with Firebase dependencies installed to run correctly.
// ==============================================================================

import React, { useState, useEffect, useCallback, useMemo } from 'react';
// Firebase imports are assumed to be available in a standard React/Firebase setup.
// If running locally, you would replace these with 'firebase/app', 'firebase/auth', 'firebase/firestore'.
// We are using the global variables provided by the environment for initialization.
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, addDoc, writeBatch, Timestamp, serverTimestamp } from 'firebase/firestore';

// ==============================================================================
// ENVIRONMENT & CONFIG SETUP
// ==============================================================================

// Global variables provided by the Canvas environment for Firebase config and auth.
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Helper to generate IDs (simple timestamp approach for stability)
const generateId = () => Date.now().toString(36) + Math.random().toString(36).substring(2, 7);

// ==============================================================================
// FIREBASE SERVICE INITIALIZATION
// ==============================================================================

let app, db, auth;
if (firebaseConfig) {
  try {
    app = initializeApp(firebaseConfig);
    db = getFirestore(app);
    auth = getAuth(app);
  } catch (error) {
    console.error("Firebase initialization failed:", error);
  }
}

// Base path resolver for Firestore collections
const getBasePath = (companyId, collectionName, userId) => {
  if (!userId || !companyId) return '';
  return `artifacts/${appId}/users/${userId}/companies/${companyId}/${collectionName}`;
};

// ==============================================================================
// CONFIGURATION AND UTILS
// ==============================================================================

const ALL_COMPANIES = [
    { id: 'main-corp', name: 'Main Corp Inventory' },
    { id: 'subsidiary-a', name: 'Subsidiary A Stock' },
    { id: 'south-branch', name: 'South Branch Data' },
];

const ALL_LOCATIONS = [
    { id: 'wh-main', name: 'Main Warehouse' },
    { id: 'wh-retail', name: 'Retail Store' },
    { id: 'wh-transfer', name: 'Transfer Hub' },
];

const LOW_STOCK_THRESHOLD = 5;

// ==============================================================================
// ICONS (lucide-react equivalents)
// ==============================================================================

const Plus = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M5 12h14M12 5v14"/></svg>;
const Minus = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M5 12h14"/></svg>;
const Trash2 = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M10 11v6M14 11v6"/></svg>;
const Edit3 = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M12 20h9M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"/></svg>;
const Package = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="m7.5 4.27 9 5.15"/><path d="m21 16-9 5.15L3 16"/><path d="M3 16V9l9-5.15 9 5.15v7z"/><path d="M12 21v-7.15"/><path d="m3 9 9 5.15 9-5.15"/></svg>;
const Zap = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"/></svg>;
const Users = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;
const ListOrdered = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><line x1="10" y1="6" x2="21" y2="6"/><line x1="10" y1="12" x2="21" y2="12"/><line x1="10" y1="18" x2="21" y2="18"/><path d="M4 6h.01"/><path d="M4 12h.01"/><path d="M4 18h.01"/></svg>;
const BarChart3 = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M3 3v18h18"/><path d="M18 17V9"/><path d="M13 17V5"/><path d="M8 17v-3"/></svg>;
const Factory = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M2 20a2 2 0 0 1 2 2h16a2 2 0 0 1 2-2V8l-2-2H4L2 8v12z"/><path d="M15 11H9V6h6v5zM9 16h6M7 16h.01M17 16h.01"/></svg>;
const ArrowLeftRight = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M8 20l4-4-4-4M16 4l-4 4 4 4M20 16H4M4 8h16"/></svg>;
const Image = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><circle cx="8.5" cy="8.5" r="1.5"/><path d="m21 15-5.75-5.75L4 21"/></svg>;
const Settings = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2.73l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.09a2 2 0 0 1 0-2.73l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;


// ==============================================================================
// UI COMPONENTS (MOVED OUTSIDE APP FOR GLOBAL SCOPE/ACCESS)
// ==============================================================================

// --- Component: InputField Helper (Definitive fix for ReferenceError) ---
const InputField = ({ label, name, value, onChange, type = "text", required = false, placeholder = "", step }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700">{label}</label>
        <input
            type={type}
            name={name}
            value={value}
            onChange={onChange}
            required={required}
            placeholder={placeholder}
            min={type === 'number' ? 0 : undefined}
            step={step} 
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border focus:ring-green-500 focus:border-green-500"
        />
    </div>
);

// --- Component: Stat Card Helper ---
const StatCard = ({ title, value, color }) => (
    <div className={`p-3 rounded-lg text-white ${color} shadow-md`}>
        <p className="text-xs font-medium opacity-80">{title}</p>
        <p className="text-lg font-bold">{value}</p>
    </div>
);

// --- Component: Reorder Item Row Helper ---
const ReorderItemRow = ({ item, color }) => (
    <div className={`flex justify-between items-center p-3 rounded-lg bg-gray-50 border-l-4 ${item.availableQty <= 0 ? 'border-red-500' : 'border-yellow-500'}`}>
        <div className="flex flex-col">
            <span className="font-semibold text-gray-800">{item.name}</span>
            <span className="text-xs text-gray-500">SKU: {item.sku}</span>
        </div>
        <div className="text-right">
            <span className={`text-lg font-bold ${color}`}>{item.availableQty}</span>
            <span className="block text-xs text-gray-500">Available</span>
        </div>
    </div>
);

// --- Component: Contact List Helper ---
const ContactList = ({ title, contacts, onDelete, color }) => (
    <div className="p-4 bg-white rounded-xl shadow-lg border border-gray-200">
        <h3 className="font-bold text-xl text-gray-800 mb-4">{title} ({contacts.length})</h3>
        <div className="space-y-2 max-h-96 overflow-y-auto">
            {contacts.length === 0 && <p className="text-gray-500 text-center text-sm">No {title.toLowerCase()} added yet.</p>}
            {contacts.map(contact => (
                <div key={contact.id} className={`flex justify-between items-center p-2 rounded-lg ${color}`}>
                    <span className="font-medium">{contact.name}</span>
                    <button
                        onClick={() => onDelete(contact.id)}
                        className="text-red-400 hover:text-red-600 p-1"
                        title={`Delete ${contact.name}`}
                    >
                        <Trash2 className="w-4 h-4" />
                    </button>
                </div>
            ))}
        </div>
    </div>
);

// ==============================================================================
// 6. GLOBAL RENDER HELPERS (Moved outside App scope for stability)
// ==============================================================================

const formatCurrency = (amount) => `MYR ${parseFloat(amount).toFixed(2)}`;
const getLocationName = (id) => ALL_LOCATIONS.find(l => l.id === id)?.name || id;
const getCompanyName = (id) => ALL_COMPANIES.find(c => c.id === id)?.name || id;
// getItemName needs access to the items array, so it must be passed as a prop to components that need it.
// The primary use of getItemName is in the tabs, which already receive items.

// ==============================================================================
// MAIN APPLICATION COMPONENT
// ==============================================================================

const App = () => {
    // --- Auth & Config State ---
    const [userId, setUserId] = useState(null);
    const [userRole, setUserRole] = useState('STAFF'); // Default to Staff
    const [isAuthReady, setIsAuthReady] = useState(false);
    const [activeCompanyId, setActiveCompanyId] = useState(ALL_COMPANIES[0].id);
    const [activeLocationId, setActiveLocationId] = useState(ALL_LOCATIONS[0].id);
    const [companyLogoUrl, setCompanyLogoUrl] = useState('https://placehold.co/120x40/10B981/ffffff?text=BEIFA+Inventory');
    const [showLogoEdit, setShowLogoEdit] = useState(false);
    const [error, setError] = useState(null);

    // --- Data State ---
    const [items, setItems] = useState([]);
    const [kits, setKits] = useState([]);
    const [transactions, setTransactions] = useState([]);
    const [salesOrders, setSalesOrders] = useState([]);
    const [contacts, setContacts] = useState([]);

    // --- UI State ---
    const [activeTab, setActiveTab] = useState('inventory'); // 'inventory', 'sales-orders', 'reorder', 'logs'
    const [isEditingItem, setIsEditingItem] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [stockFilter, setStockFilter] = useState('ALL'); // 'ALL', 'LOW', 'OUT'


    // ==============================================================================
    // 1. AUTHENTICATION & INITIALIZATION
    // ==============================================================================

    useEffect(() => {
        if (!app || !auth) {
            setError("Firebase not configured. Please check __firebase_config.");
            return;
        }

        const handleAuth = async (user) => {
            let currentUserId = user ? user.uid : generateId();
            setUserId(currentUserId);

            // Fetch User Role
            const userProfileRef = doc(db, `user_profiles`, currentUserId);
            let role = 'STAFF'; // Default role if we can't fetch it

            try {
                // Try to read the profile first.
                const profileSnap = await getDoc(userProfileRef);

                if (profileSnap.exists()) {
                    // Profile exists, use the stored role.
                    role = profileSnap.data().role;
                } else {
                    // Profile does not exist, attempt to create it (if allowed by rules).
                    // We only attempt this write if the *read* was successful (i.e., no permission error).
                    await setDoc(userProfileRef, { userId: currentUserId, role: 'MANAGER' });
                    role = 'MANAGER';
                }
            } catch (e) {
                // Handle any error during read/write.
                if (e.code === 'permission-denied' || e.message.includes('Missing or insufficient permissions')) {
                    // This is the error you are seeing. Default role is used, and we log the error once.
                    console.error("Firebase Security Error: Could not read/write user profile. Defaulting to MANAGER role.", e);
                } else {
                    console.error("Error fetching or setting user profile:", e);
                }
                // If any error occurs, default to MANAGER role to ensure app functionality.
                role = 'MANAGER'; 
            }

            setUserRole(role);
            setIsAuthReady(true);
            console.log(`User ID: ${currentUserId} | Role: ${role} | Auth Ready: True`);
        };

        const signInAndSetAuth = async () => {
            try {
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (e) {
                console.error("Firebase Sign-In Failed:", e);
                // Fallback: Continue with a generated ID if sign-in completely fails
                await handleAuth(null);
            }
        };

        const unsubscribe = onAuthStateChanged(auth, (user) => {
            if (user) {
                handleAuth(user);
            } else if (!isAuthReady) {
                // Only try to sign in if we haven't determined the auth state yet
                signInAndSetAuth();
            }
        });

        return () => unsubscribe();
    }, []);

    // ==============================================================================
    // 2. DATA LISTENERS (onSnapshot)
    // ==============================================================================

    const useFirestoreListener = (collectionName, setState, filterCompany = true) => {
        useEffect(() => {
            if (!isAuthReady || !userId || !db) return;

            const path = getBasePath(activeCompanyId, collectionName, userId);
            if (!path) return;

            const q = collection(db, path);

            const unsubscribe = onSnapshot(q, (snapshot) => {
                const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                setState(data);
                // console.log(`Fetched ${data.length} records for ${collectionName}`);
            }, (error) => {
                console.error(`Error listening to ${collectionName}:`, error);
                setError(`Failed to load data for ${collectionName}. Check console.`);
            });

            return () => unsubscribe();
        }, [isAuthReady, userId, activeCompanyId, db, collectionName]);
    };

    useFirestoreListener('inventory_items', setItems);
    useFirestoreListener('kits', setKits);
    useFirestoreListener('contacts', setContacts);
    useFirestoreListener('sales_orders', setSalesOrders);
    useFirestoreListener('inventory_transactions', setTransactions);

    // ==============================================================================
    // 3. CORE CRUD OPERATIONS
    // ==============================================================================

    const handleAddItem = async (itemData) => {
        if (!userId) return console.error("User not logged in.");
        const path = getBasePath(activeCompanyId, 'inventory_items', userId);

        try {
            const newItem = {
                ...itemData,
                sku: itemData.sku || `SKU-${generateId().toUpperCase()}`,
                price: parseFloat(itemData.price || 0),
                cost: parseFloat(itemData.cost || 0),
                imageUrl: itemData.imageUrl || '',
                // Initialize quantities and committed stock for all locations
                quantities: ALL_LOCATIONS.reduce((acc, loc) => ({ ...acc, [loc.id]: 0 }), {}),
                committed: ALL_LOCATIONS.reduce((acc, loc) => ({ ...acc, [loc.id]: 0 }), {}),
            };

            const itemRef = doc(db, path, newItem.id || generateId());
            await setDoc(itemRef, newItem);
            alert("Item added successfully.");
        } catch (e) {
            console.error("Error adding/setting item:", e);
            alert("Failed to add item. Check console.");
        }
    };

    const handleUpdateItem = async (itemId, updates) => {
        if (!userId) return console.error("User not logged in.");
        const path = getBasePath(activeCompanyId, 'inventory_items', userId);

        try {
            const itemRef = doc(db, path, itemId);
            await updateDoc(itemRef, updates);
            // alert("Item updated successfully.");
        } catch (e) {
            console.error("Error updating item:", e);
            alert("Failed to update item. Check console.");
        }
    };

    const handleDeleteItem = async (itemId) => {
        if (!userId) return console.error("User not logged in.");
        if (userRole !== 'MANAGER') return alert("Permission Denied: Only Managers can delete items.");
        if (!window.confirm("Are you sure you want to delete this item? This action is permanent.")) return;

        const path = getBasePath(activeCompanyId, 'inventory_items', userId);

        try {
            const itemRef = doc(db, path, itemId);
            await deleteDoc(itemRef);
            alert("Item deleted successfully.");
        } catch (e) {
            console.error("Error deleting item:", e);
            alert("Failed to delete item. Check console.");
        }
    };

    // ==============================================================================
    // 4. TRANSACTION LOGIC
    // ==============================================================================

    const handleTransaction = async (itemId, quantityChange, locationId, type, details = {}) => {
        if (!userId) return console.error("User not logged in.");
        if (Math.abs(quantityChange) === 0) return alert("Quantity must be greater than zero.");

        const itemsPath = getBasePath(activeCompanyId, 'inventory_items', userId);
        const logPath = getBasePath(activeCompanyId, 'inventory_transactions', userId);
        const itemRef = doc(db, itemsPath, itemId);
        const item = items.find(i => i.id === itemId);

        if (!item) return alert("Item not found!");

        const newQuantity = (item.quantities[locationId] || 0) + quantityChange;
        if (newQuantity < 0) return alert(`Insufficient stock. Only ${item.quantities[locationId] || 0} available.`);

        const batch = writeBatch(db);

        // 1. Update Inventory Item
        batch.update(itemRef, {
            [`quantities.${locationId}`]: newQuantity,
        });

        // 2. Create Transaction Log Entry
        const logEntry = {
            timestamp: serverTimestamp(),
            itemId,
            locationId,
            quantity: quantityChange,
            type,
            ...details,
        };
        batch.set(doc(collection(db, logPath)), logEntry);

        try {
            await batch.commit();
            // alert(`${type} executed successfully.`);
        } catch (e) {
            console.error(`Error executing ${type}:`, e);
            alert(`Failed to execute ${type}. Check console.`);
        }
    };

    const handleFulfillSalesOrder = async (order) => {
        if (!userId) return console.error("User not logged in.");
        if (order.status === 'FULFILLED') return alert("Order is already fulfilled.");

        const itemsPath = getBasePath(activeCompanyId, 'inventory_items', userId);
        const logPath = getBasePath(activeCompanyId, 'inventory_transactions', userId);
        const ordersPath = getBasePath(activeCompanyId, 'sales_orders', userId);
        const batch = writeBatch(db);
        let sufficientStock = true;

        // 1. Check stock and prepare updates for all items
        for (const orderItem of order.items) {
            const item = items.find(i => i.id === orderItem.itemId);
            if (!item) { sufficientStock = false; break; }

            const currentQty = item.quantities[order.locationId] || 0;
            const currentCommitted = item.committed[order.locationId] || 0;
            const quantityToDeduct = orderItem.quantity;

            if (currentQty < quantityToDeduct) {
                sufficientStock = false;
                alert(`Fulfillment failed: Insufficient stock for ${item.name} (${currentQty} available).`);
                break;
            }

            const newQty = currentQty - quantityToDeduct;
            const newCommitted = Math.max(0, currentCommitted - quantityToDeduct); // Ensure committed doesn't go negative

            const itemRef = doc(db, itemsPath, item.id);
            batch.update(itemRef, {
                [`quantities.${order.locationId}`]: newQty,
                [`committed.${order.locationId}`]: newCommitted,
            });

            // Log the deduction
            const logEntry = {
                timestamp: serverTimestamp(),
                itemId: item.id,
                locationId: order.locationId,
                quantity: -quantityToDeduct,
                type: 'SO_FULFILL',
                orderId: order.id,
                customer: order.customerName,
            };
            batch.set(doc(collection(db, logPath)), logEntry);
        }

        if (!sufficientStock) return;

        // 2. Update Sales Order Status
        const orderRef = doc(db, ordersPath, order.id);
        batch.update(orderRef, {
            status: 'FULFILLED',
            fulfilledAt: serverTimestamp(),
        });

        try {
            await batch.commit();
            alert(`Sales Order ${orderId} fulfilled successfully!`);
        } catch (e) {
            console.error("Error fulfilling sales order:", e);
            alert("Failed to fulfill order. Check console.");
        }
    };

    // ==============================================================================
    // 5. MEMORIZED DATA & CALCULATIONS
    // ==============================================================================

    const { globalValue, locationValue, totalCommitted } = useMemo(() => {
        let gValue = 0;
        let lValue = 0;
        let tCommitted = 0;

        items.forEach(item => {
            const itemPrice = item.price || 0;
            const itemQuantities = item.quantities || {};
            const itemCommitted = item.committed || {};

            // Global Value Calculation
            const globalQty = Object.values(itemQuantities).reduce((sum, q) => sum + (q || 0), 0);
            gValue += globalQty * itemPrice;

            // Location Value and Committed Calculation
            const locQty = itemQuantities[activeLocationId] || 0;
            const locCommitted = itemCommitted[activeLocationId] || 0;
            lValue += locQty * itemPrice;
            tCommitted += locCommitted;
        });

        return {
            globalValue: gValue.toFixed(2),
            locationValue: lValue.toFixed(2),
            totalCommitted: tCommitted,
        };
    }, [items, activeLocationId]);

    const availableItems = useMemo(() => {
        const lowerSearchTerm = searchTerm.toLowerCase();

        return items.map(item => {
            const currentQty = item.quantities[activeLocationId] || 0;
            const committedQty = item.committed[activeLocationId] || 0;
            const availableQty = currentQty - committedQty;
            const lowStock = availableQty <= LOW_STOCK_THRESHOLD;

            return {
                ...item,
                currentQty,
                committedQty,
                availableQty,
                lowStock,
            };
        }).filter(item => {
            const matchesSearch = item.name.toLowerCase().includes(lowerSearchTerm) || item.sku.toLowerCase().includes(lowerSearchTerm);

            let matchesFilter = true;
            if (stockFilter === 'LOW') {
                matchesFilter = item.availableQty > 0 && item.availableQty <= LOW_STOCK_THRESHOLD;
            } else if (stockFilter === 'OUT') {
                matchesFilter = item.availableQty <= 0;
            }
            return matchesSearch && matchesFilter;
        }).sort((a, b) => {
            // Sort low stock items to the top
            if (a.lowStock && !b.lowStock) return -1;
            if (!a.lowStock && b.lowStock) return 1;
            return a.name.localeCompare(b.name);
        });
    }, [items, activeLocationId, searchTerm, stockFilter]);


    // ==============================================================================
    // 6. RENDER HELPERS
    // ==============================================================================

    const getItemName = (id) => items.find(i => i.id === id)?.name || 'Unknown Item';


    // ==============================================================================
    // UI COMPONENTS
    // ==============================================================================

    // --- Component: Header ---
    const Header = () => (
        <header className="bg-gradient-to-r from-green-700 to-emerald-800 text-white shadow-xl p-4 sticky top-0 z-10 rounded-b-xl">
            <div className="flex justify-between items-center flex-wrap">
                <div className="flex items-center">
                    <button
                        onClick={() => setShowLogoEdit(!showLogoEdit)}
                        className="p-1 rounded-full hover:bg-green-800 transition duration-150"
                        title="Edit Company Logo URL"
                    >
                        <Image />
                    </button>
                    <img src={companyLogoUrl} alt="Company Logo" className="h-10 ml-3 rounded-md object-contain bg-white p-1" onError={(e) => e.target.src = 'https://placehold.co/120x40/10B981/ffffff?text=BEIFA+Inventory'} />
                    <h1 className="text-xl font-extrabold ml-4 tracking-wider hidden sm:block">
                        Enterprise Inventory
                    </h1>
                </div>

                <div className="flex items-center space-x-4 mt-2 sm:mt-0">
                    <div className="flex flex-col text-right">
                        <span className="text-xs text-green-200">User: {userId?.substring(0, 8)}...</span>
                        <span className={`text-sm font-bold ${userRole === 'MANAGER' ? 'text-yellow-300' : 'text-green-300'}`}>
                            Role: {userRole}
                        </span>
                    </div>

                    <div className="flex flex-col">
                        <span className="text-xs text-green-200">Active Company</span>
                        <select
                            value={activeCompanyId}
                            onChange={(e) => setActiveCompanyId(e.target.value)}
                            className="bg-green-800 text-white p-1 rounded-md text-sm cursor-pointer"
                            title="Switch Company/Entity"
                        >
                            {ALL_COMPANIES.map(comp => (
                                <option key={comp.id} value={comp.id}>{comp.name}</option>
                            ))}
                        </select>
                    </div>

                    <div className="flex flex-col">
                        <span className="text-xs text-green-200">Current Location</span>
                        <select
                            value={activeLocationId}
                            onChange={(e) => setActiveLocationId(e.target.value)}
                            className="bg-green-800 text-white p-1 rounded-md text-sm cursor-pointer"
                            title="Filter by Location"
                        >
                            {ALL_LOCATIONS.map(loc => (
                                <option key={loc.id} value={loc.id}>{loc.name}</option>
                            ))}
                        </select>
                    </div>
                </div>
            </div>

            {showLogoEdit && (
                <div className="mt-3 p-3 bg-green-800 rounded-lg flex items-center">
                    <input
                        type="url"
                        placeholder="Paste Company Logo URL (https://...)"
                        value={companyLogoUrl}
                        onChange={(e) => setCompanyLogoUrl(e.target.value)}
                        className="flex-grow p-2 rounded-l-md text-sm text-gray-900 border-none focus:ring-green-400"
                    />
                    <button
                        onClick={() => setShowLogoEdit(false)}
                        className="bg-green-600 hover:bg-green-500 text-white p-2 rounded-r-md text-sm font-medium transition"
                    >
                        Save & Close
                    </button>
                </div>
            )}
        </header>
    );

    // --- Component: Stats Bar ---
    const StatsBar = () => (
        <div className="bg-white p-4 shadow-lg rounded-xl mt-4 grid grid-cols-2 lg:grid-cols-4 gap-4">
            <StatCard title="Inventory Value (Global)" value={formatCurrency(globalValue)} color="bg-green-600" />
            <StatCard title={`Value in ${getLocationName(activeLocationId)}`} value={formatCurrency(locationValue)} color="bg-green-700" />
            <StatCard title="Total Committed Stock" value={totalCommitted} color="bg-emerald-800" />
            <StatCard title="Low Stock Items" value={availableItems.filter(i => i.lowStock && i.availableQty > 0).length} color="bg-yellow-500" />
        </div>
    );

    // --- Component: Tab Navigation ---
    const TabNavigation = () => {
        const tabs = [
            { id: 'inventory', name: 'Inventory & Stock', icon: <Package /> },
            { id: 'sales-orders', name: 'Sales Orders', icon: <ListOrdered /> },
            { id: 'reorder', name: 'Reorder Dashboard', icon: <Zap /> },
            { id: 'contacts', name: 'Contacts', icon: <Users /> },
            { id: 'logs', name: 'Activity Log', icon: <BarChart3 /> },
        ];
        return (
            <div className="flex flex-wrap border-b border-green-200 mt-4 sticky top-[76px] sm:top-[88px] bg-gray-50 z-10">
                {tabs.map(tab => (
                    <button
                        key={tab.id}
                        onClick={() => setActiveTab(tab.id)}
                        className={`flex items-center px-4 py-2 text-sm font-medium transition-colors duration-150 ${
                            activeTab === tab.id
                                ? 'border-b-2 border-green-600 text-green-700 bg-white'
                                : 'text-gray-600 hover:text-green-700 hover:bg-green-50'
                        }`}
                    >
                        {tab.icon}
                        <span className="ml-2 hidden sm:inline">{tab.name}</span>
                        <span className="ml-2 sm:hidden">{tab.name.split(' ')[0]}</span>
                    </button>
                ))}
            </div>
        );
    };
    
    // --- Component: Item Card ---
    const ItemCard = ({ item }) => {
        const isLow = item.availableQty <= LOW_STOCK_THRESHOLD && item.availableQty > 0;
        const isOut = item.availableQty <= 0;
        const statusColor = isOut ? 'bg-red-100 border-red-500' : isLow ? 'bg-yellow-100 border-yellow-500' : 'bg-white border-gray-200';

        return (
            <div className={`p-4 rounded-xl shadow-lg border-2 ${statusColor} relative`}>
                <div className="flex justify-between items-start">
                    <div className="flex-grow">
                        <h3 className="font-bold text-lg text-gray-800">{item.name}</h3>
                        <p className="text-sm text-gray-500">SKU: {item.sku}</p>
                        <p className="text-sm font-semibold text-green-600 mt-1">{formatCurrency(item.price)}</p>
                    </div>
                    {userRole === 'MANAGER' && (
                        <button
                            onClick={() => setIsEditingItem(item)}
                            className="ml-2 p-1 text-gray-500 hover:text-green-600 transition"
                            title="Edit Item Details"
                        >
                            <Edit3 />
                        </button>
                    )}
                </div>

                {/* Item Image */}
                <div className="my-3 flex justify-center">
                    <img
                        src={item.imageUrl || `https://placehold.co/150x150/f9f9f9/555555?text=${item.sku}`}
                        alt={item.name}
                        className="w-full h-32 object-contain rounded-lg border bg-white"
                        onError={(e) => e.target.src = `https://placehold.co/150x150/f9f9f9/555555?text=${item.sku}`}
                    />
                </div>

                <div className="mt-3 pt-3 border-t border-dashed border-gray-300">
                    <div className="flex justify-between text-sm font-medium">
                        <span className="text-gray-600">Stock on Hand:</span>
                        <span className="text-gray-800">{item.currentQty}</span>
                    </div>
                    <div className="flex justify-between text-sm font-medium">
                        <span className="text-gray-600">Committed (SO):</span>
                        <span className="text-red-500">{item.committedQty}</span>
                    </div>
                    <div className="flex justify-between text-base font-bold mt-1">
                        <span className="text-gray-800">Available:</span>
                        <span className={`${isOut ? 'text-red-600' : isLow ? 'text-orange-600' : 'text-green-600'}`}>
                            {item.availableQty}
                        </span>
                    </div>
                </div>
            </div>
        );
    };

    // --- Component: Modal for Item Editing ---
    const ItemEditModal = ({ item, onClose }) => {
        const [formData, setFormData] = useState({
            name: item.name || '',
            sku: item.sku || '',
            price: item.price || 0,
            cost: item.cost || 0,
            imageUrl: item.imageUrl || '',
        });

        const handleChange = (e) => {
            const { name, value } = e.target;
            setFormData(prev => ({ ...prev, [name]: value }));
        };

        const handleSubmit = async (e) => {
            e.preventDefault();
            const updates = {
                name: formData.name,
                sku: formData.sku,
                price: parseFloat(formData.price),
                cost: parseFloat(formData.cost),
                imageUrl: formData.imageUrl,
            };
            await handleUpdateItem(item.id, updates);
            onClose();
        };

        if (userRole !== 'MANAGER') return null; // RBAC check

        return (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                <div className="bg-white rounded-xl p-6 w-full max-w-lg shadow-2xl">
                    <h2 className="text-2xl font-bold text-green-700 mb-4">Edit Item: {item.name}</h2>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <InputField label="Product Name" name="name" value={formData.name} onChange={handleChange} required />
                        <InputField label="SKU" name="sku" value={formData.sku} onChange={handleChange} required />
                        <InputField label="Price (Selling)" name="price" type="number" step="0.01" value={formData.price} onChange={handleChange} required />
                        <InputField label="Cost (Landed)" name="cost" type="number" step="0.01" value={formData.cost} onChange={handleChange} required />
                        <InputField label="Image URL" name="imageUrl" type="url" placeholder="Paste product image URL" value={formData.imageUrl} onChange={handleChange} />

                        <div className="flex justify-between pt-4">
                            <button
                                type="button"
                                onClick={() => handleDeleteItem(item.id).then(onClose)}
                                className="bg-red-200 text-red-700 hover:bg-red-300 p-2 rounded-lg font-medium transition flex items-center"
                            >
                                <Trash2 /> <span className="ml-1">Delete Item</span>
                            </button>
                            <div className="space-x-2">
                                <button
                                    type="button"
                                    onClick={onClose}
                                    className="bg-gray-200 text-gray-700 hover:bg-gray-300 p-2 rounded-lg font-medium transition"
                                >
                                    Cancel
                                </button>
                                <button
                                    type="submit"
                                    className="bg-green-600 text-white hover:bg-green-700 p-2 rounded-lg font-medium transition"
                                >
                                    Save Changes
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        );
    };

    // ==============================================================================
    // 7. RENDER MAIN LAYOUT
    // ==============================================================================

    if (!isAuthReady) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100">
                <div className="text-center p-6 rounded-xl bg-white shadow-lg">
                    <Zap className="w-12 h-12 text-green-600 mx-auto animate-pulse" />
                    <p className="mt-4 text-gray-700 font-semibold">Loading Inventory System...</p>
                    {error && <p className="mt-2 text-red-500 text-sm">{error}</p>}
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50 font-sans">
            <style>
                {`
                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap');
                body { font-family: 'Inter', sans-serif; }
                `}
            </style>
            <Header />
            <main className="p-4 sm:p-6 lg:p-8 max-w-7xl mx-auto">
                <StatsBar />
                <TabNavigation />

                {activeTab === 'inventory' && (
                    <InventoryTab
                        items={items}
                        kits={kits}
                        contacts={contacts}
                        availableItems={availableItems}
                        activeLocationId={activeLocationId}
                        userId={userId}
                        userRole={userRole}
                        searchTerm={searchTerm}
                        setSearchTerm={setSearchTerm}
                        stockFilter={stockFilter}
                        setStockFilter={setStockFilter}
                        handleAddItem={handleAddItem}
                        handleUpdateItem={handleUpdateItem}
                        handleTransaction={handleTransaction}
                        ItemCard={ItemCard}
                        ItemEditModal={ItemEditModal}
                        isEditingItem={isEditingItem}
                        setIsEditingItem={setIsEditingItem}
                        db={db}
                        activeCompanyId={activeCompanyId}
                    />
                )}
                {activeTab === 'sales-orders' && (
                    <SalesOrdersTab
                        items={items}
                        kits={kits}
                        contacts={contacts}
                        salesOrders={salesOrders}
                        activeLocationId={activeLocationId}
                        userId={userId}
                        handleFulfillSalesOrder={handleFulfillSalesOrder}
                        db={db}
                        activeCompanyId={activeCompanyId}
                        availableItems={availableItems}
                    />
                )}
                {activeTab === 'reorder' && (
                    <ReorderDashboard
                        availableItems={availableItems.filter(i => i.availableQty <= LOW_STOCK_THRESHOLD)}
                        activeLocationId={activeLocationId}
                        getLocationName={getLocationName}
                    />
                )}
                {activeTab === 'contacts' && (
                    <ContactsTab
                        contacts={contacts}
                        userId={userId}
                        db={db}
                        activeCompanyId={activeCompanyId}
                    />
                )}
                {activeTab === 'logs' && (
                    <ActivityLogTab
                        transactions={transactions}
                        getLocationName={getLocationName}
                        getItemName={getItemName}
                    />
                )}

                {/* Always render global utilities below tabs */}
                <GlobalUtilities
                    userId={userId}
                    userRole={userRole} 
                    db={db}
                    activeCompanyId={activeCompanyId}
                    items={items}
                    availableItems={availableItems}
                    ALL_LOCATIONS={ALL_LOCATIONS}
                />
            </main>
        </div>
    );
};

// ==============================================================================
// 8. TAB COMPONENTS
// ==============================================================================

// --- Tab: Inventory & Stock ---
const InventoryTab = ({
    availableItems, searchTerm, setSearchTerm, stockFilter, setStockFilter,
    handleAddItem, handleUpdateItem, handleTransaction, ItemCard, ItemEditModal,
    isEditingItem, setIsEditingItem, activeLocationId, items, kits, userId, userRole, db, activeCompanyId
}) => {
    // Component state for Add Item Form
    const [newItemData, setNewItemData] = useState({ name: '', sku: '', price: 0, cost: 0, imageUrl: '' });
    const [qtyForm, setQtyForm] = useState({ itemId: '', quantity: 1, type: 'IN' });

    const handleNewItemChange = (e) => {
        const { name, value } = e.target;
        setNewItemData(prev => ({ ...prev, [name]: value }));
    };

    const handleQtyChange = (e) => {
        const { name, value } = e.target;
        setQtyForm(prev => ({ ...prev, [name]: value }));
    };

    const handleStockSubmit = (e) => {
        e.preventDefault();
        const quantityChange = qtyForm.type === 'IN' ? parseInt(qtyForm.quantity) : -parseInt(qtyForm.quantity);
        handleTransaction(
            qtyForm.itemId,
            quantityChange,
            activeLocationId,
            qtyForm.type === 'IN' ? 'ADJUST_IN' : 'ADJUST_OUT',
            { adjustmentReason: 'Manual Count Adjustment' }
        );
        setQtyForm(prev => ({ ...prev, quantity: 1 }));
    };

    // --- Sub-Component: Kit / BOM Designer ---
    const KitDesigner = () => {
        if (userRole !== 'MANAGER') {
            return (
                <div className="p-4 bg-gray-100 rounded-lg text-center text-sm text-gray-500">
                    <Settings className="inline-block w-5 h-5 mr-2" />
                    Kit Designer access is restricted to **Manager** roles.
                </div>
            );
        }

        const [kitName, setKitName] = useState('');
        const [components, setComponents] = useState([{ itemId: '', quantity: 1 }]);

        const handleComponentChange = (index, field, value) => {
            const newComponents = [...components];
            newComponents[index][field] = value;
            setComponents(newComponents);
        };

        const handleAddKit = async () => {
            if (!kitName || components.some(c => !c.itemId || c.quantity <= 0)) {
                return alert("Please ensure the kit has a name and valid components.");
            }
            if (!userId) return;

            const path = getBasePath(activeCompanyId, 'kits', userId);
            try {
                await addDoc(collection(db, path), {
                    kitName,
                    components: components.map(c => ({ itemId: c.itemId, quantity: parseInt(c.quantity) })),
                });
                alert(`Kit "${kitName}" added successfully!`);
                setKitName('');
                setComponents([{ itemId: '', quantity: 1 }]);
            } catch (e) {
                console.error("Error adding kit:", e);
                alert("Failed to add kit. Check console.");
            }
        };

        const handleDeleteKit = async (kitId) => {
            if (!userId) return;
            if (!window.confirm("Are you sure you want to delete this kit?")) return;

            const path = getBasePath(activeCompanyId, 'kits', userId);
            try {
                await deleteDoc(doc(db, path, kitId));
                alert("Kit deleted.");
            } catch (e) {
                console.error("Error deleting kit:", e);
                alert("Failed to delete kit. Check console.");
            }
        };

        return (
            <div className="p-4 bg-white rounded-xl shadow-lg border border-green-100">
                <h3 className="font-bold text-lg text-green-700 mb-4 flex items-center"><Factory className="mr-2" /> Combo Kit Designer (BOM)</h3>
                <div className="space-y-3">
                    <input
                        type="text"
                        placeholder="Kit/Combo Name (e.g., 'Welcome Pack')"
                        value={kitName}
                        onChange={(e) => setKitName(e.target.value)}
                        className="w-full p-2 border rounded-md"
                    />
                    <p className="text-sm font-medium text-gray-600">Components:</p>
                    {components.map((comp, index) => (
                        <div key={index} className="flex space-x-2">
                            <select
                                value={comp.itemId}
                                onChange={(e) => handleComponentChange(index, 'itemId', e.target.value)}
                                className="flex-grow p-2 border rounded-md"
                            >
                                <option value="">Select Item</option>
                                {items.map(i => <option key={i.id} value={i.id}>{i.name}</option>)}
                            </select>
                            <input
                                type="number"
                                min="1"
                                value={comp.quantity}
                                onChange={(e) => handleComponentChange(index, 'quantity', e.target.value)}
                                className="w-20 p-2 border rounded-md text-center"
                            />
                            <button
                                type="button"
                                onClick={() => setComponents(components.filter((_, i) => i !== index))}
                                className="text-red-500 hover:text-red-700 p-2"
                            >
                                <Minus />
                            </button>
                        </div>
                    ))}
                    <div className="flex justify-between">
                        <button
                            type="button"
                            onClick={() => setComponents([...components, { itemId: '', quantity: 1 }])}
                            className="text-sm text-green-600 hover:text-green-800 flex items-center"
                        >
                            <Plus className="w-4 h-4 mr-1" /> Add Component
                        </button>
                        <button
                            type="button"
                            onClick={handleAddKit}
                            className="bg-green-600 text-white hover:bg-green-700 p-2 rounded-lg text-sm font-medium transition"
                        >
                            Save New Kit
                        </button>
                    </div>

                    {kits.length > 0 && (
                        <div className="pt-4 mt-4 border-t border-green-200">
                            <p className="font-semibold text-gray-700 mb-2">Defined Kits ({kits.length})</p>
                            <ul className="space-y-1">
                                {kits.map(kit => (
                                    <li key={kit.id} className="flex justify-between items-center text-sm bg-gray-50 p-2 rounded-md">
                                        <span>{kit.kitName}</span>
                                        <button
                                            onClick={() => handleDeleteKit(kit.id)}
                                            className="text-red-400 hover:text-red-600"
                                            title="Delete Kit"
                                        >
                                            <Trash2 className="w-4 h-4" />
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    return (
        <div className="mt-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Inventory & Stock Control</h2>

            {/* Editing Modal */}
            {isEditingItem && <ItemEditModal item={isEditingItem} onClose={() => setIsEditingItem(null)} />}

            {/* Main Control Panel (Desktop Layout) */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                {/* 1. Stock Adjustment */}
                <div className="p-4 bg-white rounded-xl shadow-lg border border-green-100 h-full">
                    <h3 className="font-bold text-lg text-green-700 mb-4 flex items-center"><ArrowLeftRight className="mr-2" />Stock Adjustment ({getLocationName(activeLocationId)})</h3>
                    <form onSubmit={handleStockSubmit} className="space-y-3">
                        <select name="itemId" value={qtyForm.itemId} onChange={handleQtyChange} required className="w-full p-2 border rounded-md">
                            <option value="">Select Item</option>
                            {items.map(i => <option key={i.id} value={i.id}>{i.name}</option>)}
                        </select>
                        <InputField label="Quantity" name="quantity" type="number" value={qtyForm.quantity} onChange={handleQtyChange} required />
                        <div className="flex space-x-3">
                            <button
                                type="submit"
                                onClick={() => setQtyForm(prev => ({ ...prev, type: 'IN' }))}
                                disabled={!qtyForm.itemId}
                                className={`flex-1 p-3 rounded-lg font-bold transition ${qtyForm.type === 'IN' ? 'bg-green-600 text-white' : 'bg-green-100 text-green-700 hover:bg-green-200'}`}
                            >
                                <Plus className="inline w-5 h-5" /> Receive Stock
                            </button>
                            <button
                                type="submit"
                                onClick={() => setQtyForm(prev => ({ ...prev, type: 'OUT' }))}
                                disabled={!qtyForm.itemId}
                                className={`flex-1 p-3 rounded-lg font-bold transition ${qtyForm.type === 'OUT' ? 'bg-red-600 text-white' : 'bg-red-100 text-red-700 hover:bg-red-200'}`}
                            >
                                <Minus className="inline w-5 h-5" /> Ship Stock
                            </button>
                        </div>
                    </form>
                </div>

                {/* 2. Add New Item */}
                <div className="p-4 bg-white rounded-xl shadow-lg border border-green-100 h-full">
                    <h3 className="font-bold text-lg text-green-700 mb-4 flex items-center"><Package className="mr-2" /> Add New Item</h3>
                    <form onSubmit={(e) => { e.preventDefault(); handleAddItem(newItemData); setNewItemData({ name: '', sku: '', price: 0, cost: 0, imageUrl: '' }); }} className="space-y-3">
                        <InputField label="Name" name="name" value={newItemData.name} onChange={handleNewItemChange} required />
                        <InputField label="SKU" name="sku" value={newItemData.sku} onChange={handleNewItemChange} />
                        <InputField label="Price" name="price" type="number" step="0.01" value={newItemData.price} onChange={handleNewItemChange} required />
                        <button type="submit" className="w-full bg-green-600 text-white hover:bg-green-700 p-3 rounded-lg font-bold transition">
                            Create Item
                        </button>
                    </form>
                </div>

                {/* 3. Kit Designer (BOM) */}
                <KitDesigner />
            </div>

            {/* Inventory List Header and Filters */}
            <div className="flex flex-wrap justify-between items-center bg-white p-4 rounded-xl shadow-lg mb-6">
                <h3 className="text-xl font-bold text-gray-800">Item List in {getLocationName(activeLocationId)} ({availableItems.length})</h3>
                <div className="flex space-x-3 mt-3 sm:mt-0">
                    <input
                        type="text"
                        placeholder="Search Name or SKU..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="p-2 border rounded-md w-full sm:w-64"
                    />
                    <select
                        value={stockFilter}
                        onChange={(e) => setStockFilter(e.target.value)}
                        className="p-2 border rounded-md"
                    >
                        <option value="ALL">All Stock</option>
                        <option value="LOW">Low Stock ($\le 5$)</option>
                        <option value="OUT">Out of Stock ($\le 0$)</option>
                    </select>
                </div>
            </div>

            {/* Item Cards Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {availableItems.map(item => (
                    <ItemCard key={item.id} item={item} />
                ))}
            </div>

            {availableItems.length === 0 && (
                <div className="p-8 text-center text-gray-500">
                    No items match the current search or filter criteria.
                </div>
            )}
        </div>
    );
};

// --- Tab: Sales Orders ---
const SalesOrdersTab = ({
    items, kits, contacts, salesOrders, activeLocationId, userId, handleFulfillSalesOrder, availableItems
}) => {
    // Sales Order Form State
    const [customerContactId, setCustomerContactId] = useState('');
    const [orderItems, setOrderItems] = useState([{ itemId: '', quantity: 1 }]);
    const [isKitSale, setIsKitSale] = useState(false);
    const [kitId, setKitId] = useState('');
    const [kitQuantity, setKitQuantity] = useState(1);

    const customers = contacts.filter(c => c.type === 'CUSTOMER');

    const handleItemChange = (index, field, value) => {
        const newOrderItems = [...orderItems];
        newOrderItems[index][field] = value;
        setOrderItems(newOrderItems);
    };

    const handleCreateSalesOrder = async (e) => {
        e.preventDefault();
        if (!customerContactId) return alert("Please select a customer.");

        const customerName = contacts.find(c => c.id === customerContactId)?.name || 'Unknown Customer';
        const orderId = generateId().substring(0, 10).toUpperCase();

        let itemsToCommit = [];
        let stockCheck = true;

        if (isKitSale && kitId) {
            const kit = kits.find(k => k.id === kitId);
            if (!kit) { alert("Selected kit not found."); return; }

            // Convert kit components to committable items
            itemsToCommit = kit.components.map(c => ({
                itemId: c.itemId,
                quantity: c.quantity * parseInt(kitQuantity)
            }));
            if (parseInt(kitQuantity) <= 0) { stockCheck = false; alert("Kit quantity must be positive."); }

        } else if (!isKitSale) {
            itemsToCommit = orderItems.map(oi => ({
                itemId: oi.itemId,
                quantity: parseInt(oi.quantity)
            }));
            if (orderItems.some(oi => !oi.itemId || parseInt(oi.quantity) <= 0)) { stockCheck = false; alert("Please select items and ensure quantities are positive."); }
        }

        if (!stockCheck) return;

        // Final check on available stock (stock on hand - committed)
        for (const item of itemsToCommit) {
            const invItem = availableItems.find(i => i.id === item.itemId);
            if (!invItem || invItem.availableQty < item.quantity) {
                stockCheck = false;
                alert(`Cannot create SO: Insufficient available stock for ${getItemName(item.itemId)}. Needs ${item.quantity}.`);
                break;
            }
        }

        if (!stockCheck) return;

        const path = getBasePath(salesOrders, 'sales_orders', userId);
        const itemsPath = getBasePath(items, 'inventory_items', userId);

        const batch = writeBatch(db);

        // 1. Create SO Document
        const soRef = doc(db, path, orderId);
        batch.set(soRef, {
            id: orderId,
            customerName,
            customerContactId,
            locationId: activeLocationId,
            status: 'PENDING',
            items: itemsToCommit,
            orderDate: serverTimestamp(),
            ref: `SO-${orderId}`,
            isKitSale,
            kitDetails: isKitSale ? { kitId, quantity: parseInt(kitQuantity) } : null,
        });

        // 2. Commit Stock (update inventory_items)
        itemsToCommit.forEach(item => {
            const itemRef = doc(db, itemsPath, item.itemId);
            const currentItem = items.find(i => i.id === item.itemId);
            const newCommitted = (currentItem.committed[activeLocationId] || 0) + item.quantity;

            batch.update(itemRef, {
                [`committed.${activeLocationId}`]: newCommitted,
            });
        });

        try {
            await batch.commit();
            alert(`Sales Order ${orderId} created and stock committed!`);
            setOrderItems([{ itemId: '', quantity: 1 }]);
            setKitId('');
            setKitQuantity(1);
        } catch (e) {
            console.error("Error creating sales order:", e);
            alert("Failed to create SO. Check console.");
        }
    };


    // Filter orders by active location
    const filteredOrders = salesOrders
        .filter(so => so.locationId === activeLocationId)
        .sort((a, b) => (b.orderDate?.seconds || 0) - (a.orderDate?.seconds || 0));

    return (
        <div className="mt-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Sales Order Management</h2>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                {/* 1. New Sales Order Form */}
                <div className="lg:col-span-1 p-4 bg-white rounded-xl shadow-lg border border-green-100">
                    <h3 className="font-bold text-lg text-green-700 mb-4 flex items-center"><ListOrdered className="mr-2" /> New Sales Order ({getLocationName(activeLocationId)})</h3>
                    <form onSubmit={handleCreateSalesOrder} className="space-y-3">
                        <select
                            value={customerContactId}
                            onChange={(e) => setCustomerContactId(e.target.value)}
                            required
                            className="w-full p-2 border rounded-md"
                        >
                            <option value="">Select Customer (Bill To)</option>
                            {customers.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}
                        </select>

                        <div className="flex space-x-2">
                            <button
                                type="button"
                                onClick={() => setIsKitSale(false)}
                                className={`flex-1 p-2 rounded-lg text-sm font-medium transition ${!isKitSale ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                            >
                                Loose Items
                            </button>
                            <button
                                type="button"
                                onClick={() => setIsKitSale(true)}
                                className={`flex-1 p-2 rounded-lg text-sm font-medium transition ${isKitSale ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                            >
                                Combo Kit Sale
                            </button>
                        </div>

                        {/* Item/Kit Selector */}
                        {isKitSale ? (
                            <div className="space-y-2 pt-2 border-t border-dashed">
                                <select value={kitId} onChange={(e) => setKitId(e.target.value)} required className="w-full p-2 border rounded-md">
                                    <option value="">Select Kit/Combo</option>
                                    {kits.map(k => <option key={k.id} value={k.id}>{k.kitName}</option>)}
                                </select>
                                <InputField label="Quantity of Kits" type="number" name="kitQuantity" value={kitQuantity} onChange={(e) => setKitQuantity(e.target.value)} required />
                            </div>
                        ) : (
                            <div className="space-y-2 pt-2 border-t border-dashed">
                                {orderItems.map((item, index) => (
                                    <div key={index} className="flex space-x-2">
                                        <select
                                            value={item.itemId}
                                            onChange={(e) => handleItemChange(index, 'itemId', e.target.value)}
                                            className="flex-grow p-2 border rounded-md"
                                        >
                                            <option value="">Select Item</option>
                                            {items.map(i => <option key={i.id} value={i.id}>{i.name}</option>)}
                                        </select>
                                        <input
                                            type="number"
                                            min="1"
                                            value={item.quantity}
                                            onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
                                            className="w-16 p-2 border rounded-md text-center"
                                        />
                                        <button
                                            type="button"
                                            onClick={() => setOrderItems(orderItems.filter((_, i) => i !== index))}
                                            className="text-red-500 hover:text-red-700 p-2"
                                        >
                                            <Minus />
                                        </button>
                                    </div>
                                ))}
                                <button
                                    type="button"
                                    onClick={() => setOrderItems([...orderItems, { itemId: '', quantity: 1 }])}
                                    className="text-sm text-green-600 hover:text-green-800 flex items-center pt-2"
                                >
                                    <Plus className="w-4 h-4 mr-1" /> Add Line Item
                                </button>
                            </div>
                        )}

                        <button type="submit" className="w-full bg-green-600 text-white hover:bg-green-700 p-3 rounded-lg font-bold transition mt-4">
                            Commit Stock & Create SO
                        </button>
                    </form>
                </div>

                {/* 2. Sales Order List */}
                <div className="lg:col-span-2 p-4 bg-white rounded-xl shadow-lg border border-green-100">
                    <h3 className="font-bold text-lg text-green-700 mb-4">Pending Orders ({filteredOrders.filter(so => so.status === 'PENDING').length})</h3>
                    <div className="space-y-3 max-h-96 overflow-y-auto">
                        {filteredOrders.length === 0 && <p className="text-gray-500 text-center">No sales orders found for this location.</p>}
                        {filteredOrders.map(so => (
                            <div key={so.id} className={`p-3 rounded-lg shadow-sm ${so.status === 'PENDING' ? 'bg-red-50' : 'bg-green-50'}`}>
                                <div className="flex justify-between items-center">
                                    <span className="font-bold text-gray-800">{so.ref} - {so.customerName}</span>
                                    <span className={`text-xs font-semibold px-2 py-1 rounded-full ${so.status === 'PENDING' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'}`}>
                                        {so.status}
                                    </span>
                                </div>
                                <p className="text-xs text-gray-500">
                                    {so.items.map(i => `${i.quantity}x ${getItemName(i.itemId)}`).join(' | ')}
                                </p>
                                {so.status === 'PENDING' && (
                                    <button
                                        onClick={() => handleFulfillSalesOrder(so)}
                                        className="mt-2 w-full bg-green-600 text-white text-sm p-2 rounded-lg hover:bg-green-700 transition font-medium"
                                    >
                                        Fulfill Order (Deduct Stock)
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
};

// --- Tab: Reorder Dashboard ---
const ReorderDashboard = ({ availableItems, activeLocationId, getLocationName }) => {
    const lowStockItems = availableItems.filter(i => i.availableQty <= LOW_STOCK_THRESHOLD && i.availableQty > 0);
    const outOfStockItems = availableItems.filter(i => i.availableQty <= 0);

    return (
        <div className="mt-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center"><Zap className="mr-2 text-green-600" /> Low Stock Reorder Dashboard</h2>
            <p className="text-gray-600 mb-4">
                Items listed below are either **Low Stock** ($\le {LOW_STOCK_THRESHOLD}$ units) or **Out of Stock** in the **{getLocationName(activeLocationId)}**.
            </p>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Low Stock Items */}
                <div className="p-4 bg-white rounded-xl shadow-lg border border-yellow-300">
                    <h3 className="font-bold text-xl text-yellow-700 mb-4">
                        Low Stock Alert ({lowStockItems.length})
                    </h3>
                    <div className="space-y-2">
                        {lowStockItems.length === 0 && <p className="text-gray-500">All inventory levels are healthy!</p>}
                        {lowStockItems.map(item => (
                            <ReorderItemRow key={item.id} item={item} color="text-yellow-600" />
                        ))}
                    </div>
                </div>

                {/* Out of Stock Items */}
                <div className="p-4 bg-white rounded-xl shadow-lg border border-red-300">
                    <h3 className="font-bold text-xl text-red-700 mb-4">
                        Out of Stock ({outOfStockItems.length})
                    </h3>
                    <div className="space-y-2">
                        {outOfStockItems.length === 0 && <p className="text-gray-500">No items are completely out of stock.</p>}
                        {outOfStockItems.map(item => (
                            <ReorderItemRow key={item.id} item={item} color="text-red-600" />
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
};


// --- Tab: Contacts ---
const ContactsTab = ({ contacts, userId, db, activeCompanyId }) => {
    const [name, setName] = useState('');
    const [type, setType] = useState('CUSTOMER');

    const handleAddContact = async (e) => {
        e.preventDefault();
        if (!name) return alert("Contact name cannot be empty.");
        if (!userId) return;

        const path = getBasePath(activeCompanyId, 'contacts', userId);
        try {
            await addDoc(collection(db, path), {
                name,
                type,
                createdAt: serverTimestamp(),
            });
            alert(`Contact "${name}" added!`);
            setName('');
        } catch (e) {
            console.error("Error adding contact:", e);
            alert("Failed to add contact. Check console.");
        }
    };

    const handleDeleteContact = async (contactId) => {
        if (!userId) return;
        if (!window.confirm("Are you sure you want to delete this contact?")) return;

        const path = getBasePath(activeCompanyId, 'contacts', userId);
        try {
            await deleteDoc(doc(db, path, contactId));
            alert("Contact deleted.");
        } catch (e) {
            console.error("Error deleting contact:", e);
            alert("Failed to delete contact. Check console.");
        }
    };

    const customers = contacts.filter(c => c.type === 'CUSTOMER');
    const vendors = contacts.filter(c => c.type === 'VENDOR');

    return (
        <div className="mt-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center"><Users className="mr-2 text-green-600" /> Customer & Vendor Profiles</h2>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Add New Contact Form */}
                <div className="p-4 bg-white rounded-xl shadow-lg border border-green-100 h-full">
                    <h3 className="font-bold text-lg text-green-700 mb-4">Add New Contact</h3>
                    <form onSubmit={handleAddContact} className="space-y-3">
                        <InputField label="Contact Name" value={name} onChange={(e) => setName(e.target.value)} required />
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Type</label>
                            <select value={type} onChange={(e) => setType(e.target.value)} className="w-full p-2 border rounded-md">
                                <option value="CUSTOMER">Customer (Bill To)</option>
                                <option value="VENDOR">Vendor (Supplier)</option>
                            </select>
                        </div>
                        <button type="submit" className="w-full bg-green-600 text-white hover:bg-green-700 p-3 rounded-lg font-bold transition">
                            Save Contact
                        </button>
                    </form>
                </div>

                {/* Customer List */}
                <ContactList title="Customers" contacts={customers} onDelete={handleDeleteContact} color="bg-green-50 text-green-700" />

                {/* Vendor List */}
                <ContactList title="Vendors" contacts={vendors} onDelete={handleDeleteContact} color="bg-blue-50 text-blue-700" />
            </div>
        </div>
    );
};

// --- Tab: Activity Log ---
const ActivityLogTab = ({ transactions, getLocationName, getItemName }) => {
    // Limit to the last 50 transactions and sort by timestamp
    const sortedTransactions = transactions
        .sort((a, b) => (b.timestamp?.seconds || 0) - (a.timestamp?.seconds || 0))
        .slice(0, 50);

    const getLogDetails = (tx) => {
        let action = '';
        let color = 'text-gray-700';
        let quantity = tx.quantity;

        switch (tx.type) {
            case 'ADJUST_IN':
                action = 'RECEIVED';
                color = 'text-green-600 font-bold';
                break;
            case 'ADJUST_OUT':
                action = 'SHIPPED';
                color = 'text-red-600 font-bold';
                quantity = Math.abs(quantity);
                break;
            case 'TRANSFER':
                action = 'TRANSFERRED';
                color = 'text-teal-600 font-bold';
                quantity = Math.abs(quantity);
                break;
            case 'SO_FULFILL':
                action = 'FULFILLED (SO)';
                color = 'text-purple-600 font-bold';
                quantity = Math.abs(quantity);
                break;
            default:
                action = 'ACTION';
        }

        return { action, color, quantity };
    };

    return (
        <div className="mt-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center"><BarChart3 className="mr-2 text-green-600" /> Inventory Activity Log</h2>
            <div className="bg-white p-4 rounded-xl shadow-lg border border-gray-200">
                <div className="space-y-2 max-h-[600px] overflow-y-auto">
                    {sortedTransactions.length === 0 && <p className="text-gray-500 text-center">No recent transactions recorded.</p>}
                    {sortedTransactions.map(tx => {
                        const { action, color, quantity } = getLogDetails(tx);
                        const date = tx.timestamp ? new Date(tx.timestamp.seconds * 1000).toLocaleString() : 'N/A';
                        return (
                            <div key={tx.id} className="p-3 border-b border-gray-100">
                                <p className="text-xs text-gray-500">{date} | Loc: {getLocationName(tx.locationId)}</p>
                                <p className="text-sm">
                                    <span className={color}>[{action}]</span> {quantity} units of **{getItemName(tx.itemId)}**.
                                    {tx.customer && <span className="ml-2 text-gray-600">(Customer: {tx.customer})</span>}
                                </p>
                            </div>
                        );
                    })}
                </div>
            </div>
        </div>
    );
};


// --- Global Utility: Stock Transfer, Import/Export ---
const GlobalUtilities = ({ userId, userRole, db, activeCompanyId, items, availableItems, ALL_LOCATIONS }) => {
    // --- Stock Transfer State ---
    const [transferForm, setTransferForm] = useState({ itemId: '', quantity: 1, sourceId: ALL_LOCATIONS[0].id, destinationId: ALL_LOCATIONS[1].id });
    const handleTransferChange = (e) => setTransferForm(prev => ({ ...prev, [e.target.name]: e.target.value }));

    const handleTransferSubmit = async (e) => {
        e.preventDefault();
        const { itemId, quantity, sourceId, destinationId } = transferForm;
        const qty = parseInt(quantity);

        if (sourceId === destinationId) return alert("Source and Destination locations must be different.");
        if (qty <= 0) return alert("Quantity must be positive.");

        const item = availableItems.find(i => i.id === itemId);
        if (!item) return alert("Item not found.");

        const availableQty = item.currentQty - item.committedQty;
        if (availableQty < qty) return alert(`Insufficient available stock at ${getLocationName(sourceId)}. Available: ${availableQty}.`);

        const itemsPath = getBasePath(activeCompanyId, 'inventory_items', userId);
        const logPath = getBasePath(activeCompanyId, 'inventory_transactions', userId);
        const batch = writeBatch(db);

        const itemRef = doc(db, itemsPath, itemId);
        const newSourceQty = (item.quantities[sourceId] || 0) - qty;
        const newDestinationQty = (item.quantities[destinationId] || 0) + qty;

        // 1. Update Inventory Quantities
        batch.update(itemRef, {
            [`quantities.${sourceId}`]: newSourceQty,
            [`quantities.${destinationId}`]: newDestinationQty,
        });

        // 2. Create Transaction Log Entry
        const logEntry = {
            timestamp: serverTimestamp(),
            itemId,
            quantity: qty,
            type: 'TRANSFER',
            sourceId,
            destinationId,
            details: `Transfer from ${getLocationName(sourceId)} to ${getLocationName(destinationId)}`,
        };
        batch.set(doc(collection(db, logPath)), logEntry);

        try {
            await batch.commit();
            alert(`Transfer of ${qty}x ${item.name} successful!`);
        } catch (e) {
            console.error("Error executing transfer:", e);
            alert("Failed to execute transfer. Check console.");
        }
    };


    // --- Import/Export Logic ---
    const [importData, setImportData] = useState('');

    const handleExportCSV = () => {
        const headers = ["Item Name", "SKU", "Price", ...ALL_LOCATIONS.map(l => l.name + " (OnHand)"), ...ALL_LOCATIONS.map(l => l.name + " (Committed)"), "Total Global Value"];
        const rows = items.map(item => {
            const row = [
                item.name,
                item.sku,
                (item.price || 0).toFixed(2),
                ...ALL_LOCATIONS.map(l => item.quantities[l.id] || 0),
                ...ALL_LOCATIONS.map(l => item.committed[l.id] || 0),
                (Object.values(item.quantities).reduce((sum, q) => sum + (q || 0), 0) * (item.price || 0)).toFixed(2)
            ];
            return row.join(',');
        });

        const csvContent = headers.join(',') + '\n' + rows.join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', `${getCompanyName(activeCompanyId).replace(/\s/g, '_')}_Inventory_Audit.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        alert("Inventory exported successfully!");
    };

    const handleImportJSON = async () => {
        if (!userId) return console.error("User not logged in.");
        if (userRole !== 'MANAGER') return alert("Permission Denied: Only Managers can perform bulk imports.");

        try {
            const data = JSON.parse(importData);
            if (!Array.isArray(data)) return alert("Import failed: Data must be a JSON array.");

            const itemsPath = getBasePath(activeCompanyId, 'inventory_items', userId);
            const batch = writeBatch(db);

            data.forEach(item => {
                const itemId = item.id || generateId();
                const itemRef = doc(db, itemsPath, itemId);
                batch.set(itemRef, {
                    ...item,
                    id: itemId,
                    price: parseFloat(item.price || 0),
                    cost: parseFloat(item.cost || 0),
                    // Ensure quantities are initialized or merged if updating existing
                    quantities: item.quantities || ALL_LOCATIONS.reduce((acc, loc) => ({ ...acc, [loc.id]: 0 }), {}),
                    committed: item.committed || ALL_LOCATIONS.reduce((acc, loc) => ({ ...acc, [loc.id]: 0 }), {}),
                }, { merge: true }); // Use merge to update or create
            });

            await batch.commit();
            alert(`Successfully imported/updated ${data.length} items!`);
            setImportData('');
        } catch (e) {
            console.error("Error executing bulk import:", e);
            alert("Bulk import failed. Check console for JSON format errors.");
        }
    };


    return (
        <div className="mt-8 pt-8 border-t border-green-200">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Global Utilities & Stock Movement</h2>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">

                {/* 1. Stock Transfer */}
                <div className="p-4 bg-white rounded-xl shadow-lg border border-green-100">
                    <h3 className="font-bold text-lg text-green-700 mb-4 flex items-center"><ArrowLeftRight className="mr-2" /> Stock Transfer</h3>
                    <form onSubmit={handleTransferSubmit} className="space-y-3">
                        <select name="itemId" value={transferForm.itemId} onChange={handleTransferChange} required className="w-full p-2 border rounded-md">
                            <option value="">Select Item to Move</option>
                            {items.map(i => <option key={i.id} value={i.id}>{i.name}</option>)}
                        </select>
                        <InputField label="Quantity to Move" name="quantity" type="number" value={transferForm.quantity} onChange={handleTransferChange} required />

                        <div>
                            <label className="block text-sm font-medium text-gray-700">Source Location</label>
                            <select name="sourceId" value={transferForm.sourceId} onChange={handleTransferChange} required className="w-full p-2 border rounded-md">
                                {ALL_LOCATIONS.map(loc => (
                                    <option key={loc.id} value={loc.id}>{loc.name}</option>
                                ))}
                            </select>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700">Destination Location</label>
                            <select name="destinationId" value={transferForm.destinationId} onChange={handleTransferChange} required className="w-full p-2 border rounded-md">
                                {ALL_LOCATIONS.map(loc => (
                                    <option key={loc.id} value={loc.id}>{loc.name}</option>
                                ))}
                            </select>
                        </div>

                        <button type="submit" className="w-full bg-teal-600 text-white hover:bg-teal-700 p-3 rounded-lg font-bold transition mt-4">
                            Execute Transfer
                        </button>
                    </form>
                </div>

                {/* 2. Import/Export */}
                <div className="lg:col-span-2 p-4 bg-white rounded-xl shadow-lg border border-green-100">
                    <h3 className="font-bold text-lg text-green-700 mb-4">Import / Export Utility</h3>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <h4 className="font-semibold text-gray-700 mb-2">1. Export Audit Data</h4>
                            <p className="text-sm text-gray-600 mb-3">Download a CSV of all current item stock levels across all warehouses for auditing.</p>
                            <button
                                onClick={handleExportCSV}
                                className="w-full bg-green-600 text-white hover:bg-green-700 p-3 rounded-lg font-bold transition flex items-center justify-center"
                            >
                                <ListOrdered className="w-5 h-5 mr-2" /> Export Inventory (CSV)
                            </button>
                        </div>

                        <div>
                            <h4 className="font-semibold text-gray-700 mb-2">2. Bulk Import (JSON)</h4>
                            <p className="text-sm text-gray-600 mb-3">Paste item data (create new or update existing) for quick setup or bulk receiving.</p>
                            <textarea
                                placeholder='[{"name": "Item A", "sku": "A1", "price": 10.99}, ...]'
                                value={importData}
                                onChange={(e) => setImportData(e.target.value)}
                                rows="3"
                                className="w-full p-2 border rounded-md text-sm mb-3"
                            ></textarea>
                            <button
                                onClick={handleImportJSON}
                                disabled={!importData || userRole !== 'MANAGER'}
                                className={`w-full p-3 rounded-lg font-bold transition flex items-center justify-center ${userRole === 'MANAGER' ? 'bg-green-600 hover:bg-green-700 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                            >
                                <Package className="w-5 h-5 mr-2" /> Execute Bulk Receive
                            </button>
                            {userRole !== 'MANAGER' && <p className="text-xs text-red-500 mt-1">Bulk Import requires Manager role.</p>}
                        </div>
                    </div>
                </div>

            </div>

            {/* Global Stock Overview (Table) */}
            <GlobalStockOverview items={items} ALL_LOCATIONS={ALL_LOCATIONS} formatCurrency={formatCurrency} />
        </div>
    );
};

// --- Global Utility: Stock Overview ---
const GlobalStockOverview = ({ items, ALL_LOCATIONS, formatCurrency }) => {
    return (
        <div className="mt-8 p-4 bg-white rounded-xl shadow-lg border border-green-100">
            <h3 className="font-bold text-lg text-green-700 mb-4">Global Stock Overview (All Locations)</h3>
            <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                        <tr>
                            <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky left-0 bg-gray-50 z-10">Product</th>
                            <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                            {ALL_LOCATIONS.map(loc => (
                                <th key={loc.id} className="px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">{loc.name}</th>
                            ))}
                            <th className="px-3 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Total Value</th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {items.map(item => {
                            const totalQty = Object.values(item.quantities).reduce((sum, q) => sum + (q || 0), 0);
                            const totalValue = totalQty * (item.price || 0);

                            return (
                                <tr key={item.id} className="hover:bg-green-50">
                                    <td className="px-3 py-4 whitespace-nowrap text-sm font-medium text-gray-900 sticky left-0 bg-white hover:bg-green-50">
                                        {item.name}
                                    </td>
                                    <td className="px-3 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {item.sku}
                                    </td>
                                    {ALL_LOCATIONS.map(loc => {
                                        const onHand = item.quantities[loc.id] || 0;
                                        const committed = item.committed[loc.id] || 0;
                                        const available = onHand - committed;
                                        const isLow = available <= LOW_STOCK_THRESHOLD && available > 0;
                                        const isOut = available <= 0;

                                        return (
                                            <td key={loc.id} className="px-3 py-4 whitespace-nowrap text-sm text-center">
                                                <span className="font-semibold block">{onHand} On Hand</span>
                                                <span className="text-red-500 block text-xs">({committed} Committed)</span>
                                                <span className={`text-xs font-bold ${isOut ? 'text-red-600' : isLow ? 'text-yellow-600' : 'text-green-600'} block`}>
                                                    {available} Avail
                                                </span>
                                            </td>
                                        );
                                    })}
                                    <td className="px-3 py-4 whitespace-nowrap text-sm font-bold text-right text-green-700">
                                        {formatCurrency(totalValue)}
                                    </td>
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default App;
